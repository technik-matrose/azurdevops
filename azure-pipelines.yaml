name: Azure Pipelines
trigger:
- main
pool: udacity-pool

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: 'azuredevopsservice'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages: 
- stage: Build
  jobs:
  - job: Build_Infrastructure
    steps:
    - task: Bash@3
      displayName: 'Bash Configuration'
      inputs:
        targetType: 'inline'
        script: |           
          #! /bin/bash
          
          sudo apt-get upgrade -y
          sudo apt update
          sudo apt-get install unzip
          sudo apt-get install zip -y
          sudo apt install nodejs -y
          sudo apt install npm -y 

    # Run Terraform Install
    # - task: TerraformInstaller@0
    #   displayName: 'Terrafom installation'
    #   inputs:
    #     terraformVersion: 1.3.7
    
    # Run Terraform Init on the pipeline agent
    # - task: TerraformCLI@0
    #   displayName: 'Terrafom init'
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'init'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     backendServiceArm: '$(azureServiceConnectionId)'
    #     backendAzureRmResourceGroupName: 'Azuredevops'
    #     backendAzureRmStorageAccountName: 'tfstate3456'
    #     backendAzureRmContainerName: 'tfstate'
    #     backendAzureRmKey: 'terraform.tfstate'

    # Run Terraform Validate    
    # - task: TerraformCLI@0
    #   displayName: Terraform plan
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'plan'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     backendServiceArm: '$(azureServiceConnectionId)'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
    #     sshPublicKey: 'PUBLIC_KEY'            # variable value
    #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName: 
    #  inputs:
    #   secureFile: 

    # Run Terraform Apply
    # - task: TerraformCLI@0
    #   displayName: Terraform apply
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'apply'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
    #     commandOptions: |
    #       -auto-approve 

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformCLI@0
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

  - job: Postman_Tests
    dependsOn: Build_Infrastructure
    steps:   
    # Postman - Install Newman
    - task: Bash@3
      displayName: Install Newman
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          sudo npm install -g newman
    # Postman Data Validation Test Suite
    - task: Bash@3
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          newman run Data-Validation.postman_collection.json -e Test.postman_environment.json --bail -r cli,junit --reporter-junit-export results/junit-data-validation.xml
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Regression Test Suite    
    - task: Bash@3
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          newman run Regression.postman_collection.json -e Test.postman_environment.json --bail -r cli,junit --reporter-junit-export results/junit-regression.xml
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman - Publish Results
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/results'
        testRunTitle: 'Tests-Postman'
        mergeTestResults: true

  - job: Archive_Test_Files
    dependsOn: Postman_Tests
    steps:
    # Selenium (UI) Test Suite - Archive the package
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip
        artifactName: Test-Selenium 
    # FakeRestAPI - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    # FakeRestAPI - Publish    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
        artifactName: Test-Jmeter-Fakerestapi
    # JMeter (Performance) Test Suite - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test-suite'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-testsuite.zip'
    # JMeter Test Suite - Publish    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-testsuite.zip'
        artifactName: Test-Jmeter-testsuite
   
- stage: Deploy1
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-18.04'      
    environment: test
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'azuredevopsservice' 
              appName: 'myApplication'
              appType: 'webApp'
              package: $(Pipeline.Workspace)/Test-Jmeter-Fakerestapi/$(Build.BuildId)-fakerestapi.zip
          #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          - task: Bash@3
            displayName: Install JMeter
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash

                sudo apt-get install openjdk-11-jre-headless -y
                wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.1.tgz -O jmeter.tgz
                tar -xzvf jmeter.tgz
          - task: Bash@3
            displayName: Run JMeter stress
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash

                apache-jmeter-5.4.1/bin/jmeter -n -t automatedtesting/jmeter/Starter.jmx \
                  -l automatedtesting/jmeter/logs/test-output.csv \
                  -e -f -o automatedtesting/jmeter/logs/test-log.html \
                  -j automatedtesting/jmeter/logs/jmeter.log    
              

  # Selenium | Functional UI Tests
- stage: Deploy2
  jobs:
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name: 'test'
      resourceType: VirtualMachine
      tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: Test-Selenium
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                sudo rm -rf chromedriver*
                wget https://chromedriver.storage.googleapis.com/96.0.4664.18/chromedriver_linux64.zip
                unzip chromedriver*.zip
                sudo mv chromedriver -f /usr/bin

                python -m pip install --upgrade pip
                pip install selenium
                pip install pytest
                pip install pytest-html
                pip install chromedriver-py=96.0.4664.18
                pip install pytest-xdist
                pip install pytest-nunit
                python3 automatedtesting/selenium/login.py